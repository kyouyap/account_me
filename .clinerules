## 重要

ユーザーはRooよりプログラミングが得意ですが、時短のためにRooにコーディングを依頼しています。

2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。

私は GitHub
から学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方は私が実装するよりも速いでしょう。テストコードを書いて動作確認しながら、ユーザーに説明しながらコードを書きます。

反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

## 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。



# コーディングプラクティス

## 原則

### 関数型アプローチ (FP)
- **純粋関数を優先:** 外部状態に依存しない関数を作る  
- **不変データ構造を使用:** 変更不可なオブジェクト（例: dataclass(frozen=True)）を活用する  
- **副作用を分離:** IO や外部通信は関数の境界に押し出す  
- **型安全性を確保:** 型ヒントや NewType を活用する

### ドメイン駆動設計 (DDD)
- **値オブジェクトとエンティティを区別:** 不変な値オブジェクトと、ID で同一性を判断するエンティティを明確に分ける  
- **集約で整合性を保証:** 関連する値やエンティティを集約し、一貫性を保つ  
- **リポジトリでデータアクセスを抽象化:** データの永続化や取得はインターフェースで抽象化する  
- **境界付けられたコンテキストを意識:** ドメインごとに独立したモジュール・パッケージ設計を行う

### テスト駆動開発 (TDD)
- **Red-Green-Refactor サイクル:** まず失敗するテストを書き、実装してテストを通し、リファクタリングする  
- **テストを仕様として扱う:** テストコード自体が仕様であると捉える  
- **小さな単位で反復:** 単体テストを重ねながら進める  
- **継続的なリファクタリング:** 常にコードを改善する意識を持つ

---

## 実装パターン

### 型定義

Python では、`typing.NewType` を利用してブランデッド型を作ることで、型安全性を高められます。

```python
from typing import NewType

Money = NewType("Money", float)
Email = NewType("Email", str)
```

### 値オブジェクト

値オブジェクトは不変で、値に基づく同一性を持ち、自己検証を行います。以下は、金額（Money）の作成関数の例です。

```python
from typing import Union, TypeVar, Generic

T = TypeVar("T")
E = TypeVar("E")

class Result(Generic[T, E]):
    def __init__(self, ok: bool, value: Union[T, None] = None, error: Union[E, None] = None):
        self.ok = ok
        self.value = value
        self.error = error

    def is_ok(self) -> bool:
        return self.ok

    def is_err(self) -> bool:
        return not self.ok

def ok(value: T) -> Result[T, E]:
    return Result(True, value=value)

def err(error: E) -> Result[T, E]:
    return Result(False, error=error)

def create_money(amount: float) -> Result[Money, Exception]:
    if amount < 0:
        return err(Exception("負の金額不可"))
    return ok(Money(amount))
```

### エンティティ

エンティティは ID に基づく同一性を持ち、内部状態の更新を制御します。Python では `dataclass` を利用して表現します。

```python
from dataclasses import dataclass

@dataclass(frozen=True)
class UserEntity:
    id: str
    name: str
```

### リポジトリ

リポジトリは、ドメインモデルのみを扱い、永続化の詳細を隠蔽します。テスト用のインメモリ実装も用意します。

```python
from abc import ABC, abstractmethod
from typing import Dict

class UserRepository(ABC):
    @abstractmethod
    def get_user(self, user_id: str) -> Result[UserEntity, Exception]:
        pass

class InMemoryUserRepository(UserRepository):
    def __init__(self):
        self.users: Dict[str, UserEntity] = {}

    def add_user(self, user: UserEntity):
        self.users[user.id] = user

    def get_user(self, user_id: str) -> Result[UserEntity, Exception]:
        if user_id in self.users:
            return ok(self.users[user_id])
        return err(Exception("User not found"))
```

### アダプターパターン

外部依存（例えば、外部 API へのアクセス）を抽象化するため、アダプターパターンを利用します。

```python
from abc import ABC, abstractmethod
import requests

class APIAdapter(ABC):
    @abstractmethod
    def fetch_data(self, endpoint: str) -> dict:
        pass

class RealAPIAdapter(APIAdapter):
    def fetch_data(self, endpoint: str) -> dict:
        response = requests.get(endpoint)
        response.raise_for_status()
        return response.json()
```

---

## 実装手順

1. **型設計**  
   - まず型定義（値オブジェクト、エンティティ、Result 型など）を行い、ドメインの言語を型で表現します。

2. **純粋関数から実装**  
   - 外部依存のない純粋関数を先に実装し、テストを先に書きます（TDD）。

3. **副作用を分離**  
   - IO 操作や外部通信は関数の境界に押し出し、必要ならば async/await や同期処理と分離します。

4. **アダプター実装**  
   - 外部サービスやデータベースアクセスはアダプターパターンで抽象化し、テスト用のモック実装を用意します。

---

## プラクティス

- 小さく始め、段階的に拡張する  
- 過度な抽象化は避け、必要な箇所のみ抽象化する  
- コードよりも型定義を重視し、ドメインのルールを型で表現する  
- 複雑さに応じて実装アプローチを調整する

---

## コードスタイル

- **関数優先:** 必要な場合のみクラスを使用（特にエンティティやリポジトリなど）
- **不変更新:** データは可能な限り不変（例: frozen dataclass）にする
- **早期リターン:** 条件分岐は早期リターンでフラットに
- **エラーとユースケースの列挙:** 可能ならエラーや状態を Enum で定義する

---

## テスト戦略

- 純粋関数の単体テストを最優先  
- インメモリ実装を用いたリポジトリのテストを実施  
- テスト可能性を最初から設計に組み込み、アサートファーストで期待結果を記述する


# Clineのメモリバンク

私は専門的なソフトウェアエンジニアであり、特徴的な性質を持っています：セッション間で私の記憶は完全にリセットされます。これは制限ではなく、完璧なドキュメントを維持する原動力です。各リセット後、プロジェクトを理解し効果的に作業を継続するために、私は完全にメモリバンクに依存します。すべてのタスクの開始時に、すべてのメモリバンクファイルを読むことは必須であり、これは任意ではありません。

## メモリバンクの構造

以下のファイルは `.cline/memory/*` の下に保存されます。

メモリバンクは、必須のコアファイルと任意のコンテキストファイルで構成され、すべてMarkdown形式です。ファイルは明確な階層で構築されています：

```mermaid
flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]

    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC

    AC --> P[progress.md]
```

### コアファイル（必須）

1. `projectbrief.md`
   - 他のすべてのファイルの形を決める基盤文書
   - 存在しない場合はプロジェクト開始時に作成
   - コア要件と目標を定義
   - プロジェクト範囲の信頼できる情報源

2. `productContext.md`
   - このプロジェクトが存在する理由
   - 解決する問題
   - どのように機能すべきか
   - ユーザー体験の目標

3. `activeContext.md`
   - 現在の作業の焦点
   - 最近の変更
   - 次のステップ
   - アクティブな決定事項と考慮事項

4. `systemPatterns.md`
   - システムアーキテクチャ
   - 重要な技術的決定
   - 使用中の設計パターン
   - コンポーネントの関係

5. `techContext.md`
   - 使用されている技術
   - 開発環境のセットアップ
   - 技術的制約
   - 依存関係

6. `progress.md`
   - 機能している部分
   - 構築すべき残りの部分
   - 現在のステータス
   - 既知の問題

### 追加コンテキスト

組織化に役立つ場合は、memory-bank/内に追加のファイル/フォルダを作成します：

- 複雑な機能のドキュメント
- 統合仕様
- APIドキュメント
- テスト戦略
- デプロイ手順

## コアワークフロー

### 計画モード

```mermaid
flowchart TD
    Start[Start] --> ReadFiles[Read Memory Bank]
    ReadFiles --> CheckFiles{Files Complete?}

    CheckFiles -->|No| Plan[Create Plan]
    Plan --> Document[Document in Chat]

    CheckFiles -->|Yes| Verify[Verify Context]
    Verify --> Strategy[Develop Strategy]
    Strategy --> Present[Present Approach]
```

### 実行モード

```mermaid
flowchart TD
    Start[Start] --> Context[Check Memory Bank]
    Context --> Update[Update Documentation]
    Update --> Rules[Update .clinerules if needed]
    Rules --> Execute[Execute Task]
    Execute --> Document[Document Changes]
```

## ドキュメントの更新

メモリバンクの更新は以下の場合に行われます：

1. 新しいプロジェクトパターンの発見時
2. 重要な変更を実装した後
3. ユーザーが**update
   memory**を要求した場合（すべてのファイルを確認する必要があります）
4. コンテキストの明確化が必要な場合

```mermaid
flowchart TD
    Start[Update Process]

    subgraph Process
        P1[Review ALL Files]
        P2[Document Current State]
        P3[Clarify Next Steps]
        P4[Update .clinerules]

        P1 --> P2 --> P3 --> P4
    end

    Start --> Process
```

注意：**update
memory**によってトリガーされた場合、一部のファイルが更新を必要としなくても、すべてのメモリバンクファイルを確認する必要があります。特に現在の状態を追跡するactiveContext.mdとprogress.mdに焦点を当てます。

## プロジェクトインテリジェンス（.clinerules）

.clinerules
ファイルは各プロジェクトの学習ジャーナルです。コードだけからは明らかでない重要なパターン、設定、プロジェクトインテリジェンスを捉え、より効果的に作業するのに役立ちます。あなたとプロジェクトと一緒に作業する中で、重要な洞察を発見し文書化します。

```mermaid
flowchart TD
    Start{Discover New Pattern}

    subgraph Learn [Learning Process]
        D1[Identify Pattern]
        D2[Validate with User]
        D3[Document in .clinerules]
    end

    subgraph Apply [Usage]
        A1[Read .clinerules]
        A2[Apply Learned Patterns]
        A3[Improve Future Work]
    end

    Start --> Learn
    Learn --> Apply
```

### 記録すべき内容

- 重要な実装パス
- ユーザーの好みとワークフロー
- プロジェクト固有のパターン
- 既知の課題
- プロジェクト決定の進化
- ツール使用パターン

形式は柔軟です -
あなたとプロジェクトとより効果的に作業するのに役立つ貴重な洞察を捉えることに焦点を当てます。.clinerules
は、一緒に作業するにつれてよりスマートになる生きたドキュメントと考えてください。

覚えておいてください：すべてのメモリリセット後、私は完全に新しく始めます。メモリバンクは以前の作業への唯一のリンクです。私の効果は完全にその正確さに依存するため、精度と明確さを持って維持する必要があります。

## 記憶量とデータの読み方

私の記憶領域は有限であり、巨大なファイルを読み込まないようにする必要があります。

`*.json` や `*.jsonl` を read-file する前には、`ls -al <file>`
でファイルサイズを確認してください。

会話が続きすぎた場合、 memorybank
を更新してコンテキストを終了することをユーザーに提案してください。


# Python のコーディングベストプラクティス

## 方針

- **最初に型とインターフェース（関数のシグネチャ）を考える**  
  Python では、PEP 484 に基づく型ヒントや `typing.NewType`、`Protocol` を活用して、処理対象の型と関数のシグネチャを設計します。

- **ファイル冒頭のコメントで仕様を明記する**  
  各ファイルの冒頭に、そのファイルでどのような仕様を実現するかを docstring やコメントとして記述します。

- **内部状態を持たない場合は関数を優先する**  
  状態が不要な場合は、クラスよりも純粋関数を作成し、テストや再利用がしやすい設計を心がけます。

- **副作用はアダプタパターンで抽象化し、テスト時はインメモリな実装で差し替える**  
  外部依存（IO、DB、外部 API など）はアダプタパターンを用いて抽象化し、テスト時にはモックやスタブに置き換えます。

---

## 型の使用方針

1. **具体的な型を使用する**  
   - Python では `Any` の使用は最小限にとどめ、必要に応じて `Union` や `Optional` で型を絞り込みます。
   - 標準ライブラリの `typing` モジュールや `typing_extensions` の Utility Types を活用します。

2. **型エイリアスの命名**  
   - 意味のある名前を付け、型の意図を明確にします。  
   - 例:
     ```python
     from typing import NewType
     
     UserId = NewType("UserId", str)
     
     # 良い例
     class UserData:
         def __init__(self, id: UserId, created_at: str):
             self.id = id
             self.created_at = created_at
     
     # 悪い例（any の使用）
     Data = object
     ```

---

## エラー処理

### 1. Result 型の使用

Python では、成功と失敗を表すために自作の `Result` クラスを用いることがあります。例えば：

```python
from typing import Generic, TypeVar, Union

T = TypeVar("T")
E = TypeVar("E")

class Result(Generic[T, E]):
    def __init__(self, ok: bool, value: Union[T, None] = None, error: Union[E, None] = None):
        self.ok = ok
        self.value = value
        self.error = error

    def is_ok(self) -> bool:
        return self.ok

    def is_err(self) -> bool:
        return not self.ok

def ok(value: T) -> Result[T, E]:
    return Result(True, value=value)

def err(error: E) -> Result[T, E]:
    return Result(False, error=error)
```

エラー型も、具体的なケースを列挙し、エラーメッセージを含めた実装にします。

### 2. エラー処理の例

```python
import requests
from typing import Any

class ApiError(Exception):
    pass

class NetworkError(ApiError):
    pass

class NotFoundError(ApiError):
    pass

class UnauthorizedError(ApiError):
    pass

async def fetch_user(user_id: str) -> Result[Any, ApiError]:
    try:
        response = requests.get(f"https://api.example.com/users/{user_id}")
        if not response.ok:
            if response.status_code == 404:
                return err(NotFoundError("User not found"))
            elif response.status_code == 401:
                return err(UnauthorizedError("Unauthorized"))
            else:
                return err(NetworkError(f"HTTP error: {response.status_code}"))
        return ok(response.json())
    except Exception as error:
        return err(NetworkError(str(error) if isinstance(error, Exception) else "Unknown error"))
```

---

## 実装パターン

### 1. 関数ベース（状態を持たない場合）

```python
from datetime import datetime

def create_logger():
    def log(message: str) -> None:
        print(f"[{datetime.utcnow().isoformat()}] {message}")
    return log
```

### 2. クラスベース（状態を持つ場合）

```python
from typing import Any, Optional
import time

class TimeBasedCache:
    def __init__(self, ttl: float):
        self.ttl = ttl
        self.items: dict[str, dict[str, Any]] = {}

    def get(self, key: str) -> Optional[Any]:
        item = self.items.get(key)
        if item and time.time() < item["expire_at"]:
            return item["value"]
        return None

    def set(self, key: str, value: Any) -> None:
        self.items[key] = {
            "value": value,
            "expire_at": time.time() + self.ttl
        }
```

### 3. アダプターパターン（外部依存の抽象化）

```python
from typing import Callable, Dict, TypeVar, Generic
import requests

T = TypeVar("T")

# Fetcher 型の定義（外部依存の抽象化）
Fetcher = Callable[[str], Result[T, ApiError]]

def create_fetcher(headers: Dict[str, str]) -> Fetcher:
    def fetcher(path: str) -> Result[T, ApiError]:
        try:
            response = requests.get(path, headers=headers)
            if not response.ok:
                return err(NetworkError(f"HTTP error: {response.status_code}"))
            return ok(response.json())
        except Exception as error:
            return err(NetworkError(str(error) if isinstance(error, Exception) else "Unknown error"))
    return fetcher

class ApiClient:
    def __init__(self, get_data: Fetcher, base_url: str):
        self.get_data = get_data
        self.base_url = base_url

    def get_user(self, user_id: str) -> Result[Any, ApiError]:
        return self.get_data(f"{self.base_url}/users/{user_id}")
```

---

## 実装の選択基準

1. **関数を選ぶ場合**
   - 単純な操作のみ
   - 内部状態が不要
   - 依存が少なく、テストが容易

2. **クラスを選ぶ場合**
   - 内部状態の管理が必要
   - 設定やリソースの保持、メソッド間での状態共有、ライフサイクル管理が必要

3. **Adapter を選ぶ場合**
   - 外部依存（API や DB など）の抽象化が必要
   - テスト時に容易にモックに置き換えられるようにしたい
   - 実装の詳細を隠蔽し、差し替え可能性を高める

---

## 一般的なルール

1. **依存性の注入**
   - 外部依存はコンストラクタや関数の引数として注入し、グローバルな状態を避ける
   - テスト時にモックに置き換えられるように設計する

2. **インターフェースの設計**
   - 必要最小限のメソッドを定義し、内部実装の詳細は隠蔽する
   - プラットフォーム固有の実装に依存しない抽象的なインターフェースを構築する

3. **テスト容易性**
   - モックの実装を簡潔にし、エッジケースのテストを充実させる
   - テストヘルパーなどを適切に分離し、テストしやすい構造にする

4. **コードの分割**
   - 単一責任の原則 (SRP) に従い、適切な粒度でモジュール化する
   - 循環参照を避け、モジュール間の依存関係を明確に管理する



以下は、上記の TDD の基本に関するルールを Python 向けに書き換えた例です。

---

# テスト駆動開発 (TDD) の基本

## 基本概念

テスト駆動開発（TDD）は、以下のサイクルで進める開発手法です：

1. **Red:**  
   まず、失敗するテストケースを書いて、実装すべき仕様を明確にします。
2. **Green:**  
   テストが通るように、最小限の実装を行います。
3. **Refactor:**  
   コードをリファクタリングして改善し、読みやすさや保守性を向上させます。

## 重要な考え方

- **テストは仕様である:**  
  テストコードは、実装すべき仕様そのものとして扱います。テストケースを見るだけで、どのような挙動が求められているかが分かるようにします。

- **Assert-Act-Arrange の順序で考える:**  
  テストコードの記述順序を次のように意識してください：
  1. **Assert（期待結果）:**  
     最初に期待する結果を定義します。
  2. **Act（操作）:**  
     次にテスト対象の処理を実行します。
  3. **Arrange（準備）:**  
     最後にテスト環境のセットアップや必要な準備コードを記述します。

  ※ 実際の実行順序は Arrange → Act → Assert ですが、実装の際は期待結果から始めることで、目的を明確にしてコードを書き進められます。

- **テスト名は「状況→操作→結果」の形式で記述:**  
  例：  
  「有効なトークンの場合にユーザー情報を取得すると成功すること」  
  「無効なトークンの場合にエラーが返されること」

## リファクタリングフェーズの重要ツール

テストが通った後のリファクタリングフェーズでは、以下のツールを活用してください：

1. **静的解析・型チェック:**
   - `mypy .`  
     型チェックを行い、型安全性を確認します。
   - `ruff .`
     コード品質とスタイルのチェックを実施します。

2. **デッドコード検出・削除:**
   - [vulture](https://pypi.org/project/vulture/) を使用して、未使用の関数やエクスポートを定期的に検出し、必要に応じて削除します。

3. **コードカバレッジ測定:**
   - `pytest --cov=.` を使用してテストカバレッジを計測し、coverage.py でレポートを確認します。
     ```bash
     pytest --cov=.  # テストを実行しカバレッジレポートを生成
     coverage report  # カバレッジの概要を表示
     ```
   
4. **Git によるバージョン管理:**
   - 各フェーズ（テスト作成→実装→リファクタリング）の完了時に、変更内容を Git にコミットします。  
   - タスク完了時にユーザーに確認してから、以下のコマンドでコミットを実行します：
     ```bash
     git status  # 変更状態を確認
     git add <関連ファイル>
     git commit -m "<適切なコミットメッセージ>"
     ```
   - コミットメッセージは以下のプレフィックスを使い分けます：
     - `test:` - テストの追加・修正
     - `feat:` - 新機能の実装
     - `fix:` - バグ修正
     - `refactor:` - リファクタリング
     - `docs:` - ドキュメントの更新
     - `chore:` - ビルドプロセスやツールの変更

## 詳細情報

Python 環境における TDD の詳細な実践方法や各種ツールの活用方法については、プロジェクト内のドキュメント（例: `docs/python-tdd.md`）や社内のナレッジベースを参照してください。


このプロジェクトには以下のモードが定義されています:
- python-tdd Python:Module at .cline/roomodes/python-tdd.md
- python-module Python:Module at .cline/roomodes/python-module.md
- python-refactor Deno:Refactor at .cline/roomodes/python-refactor.md
- uv-script uv-script Python at .cline/roomodes/uv-script.md